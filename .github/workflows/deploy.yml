name: 🚀 Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

# Prevent concurrent deployments
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    outputs:
      deployment-enabled: ${{ steps.deployment-check.outputs.enabled }}
      domain: ${{ steps.deployment-check.outputs.domain }}
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Shallow clones should be disabled for better analysis

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: package-lock.json

    - name: 📦 Install dependencies
      run: npm ci --prefer-offline --no-audit

    - name: 🔍 TypeScript type check
      run: npm run type-check

    - name: 🧹 Run linter
      run: npm run lint:check

    - name: 🧪 Run tests with coverage
      run: npm run test:ci

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: false
        verbose: true
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: 🏗️ Build project
      run: npm run build
      env:
        NODE_ENV: production

    - name: 🌐 Validate custom domain setup
      run: |
        chmod +x scripts/validate-domain.sh
        ./scripts/validate-domain.sh

    - name: 📏 Check bundle size
      run: |
        echo "## Bundle Size Report 📦" >> $GITHUB_STEP_SUMMARY
        echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
        echo "|------|------|" >> $GITHUB_STEP_SUMMARY
        find dist -type f -name "*.js" -o -name "*.css" | while read file; do
          size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file")
          size_kb=$((size / 1024))
          echo "| $(basename "$file") | ${size_kb}KB |" >> $GITHUB_STEP_SUMMARY
        done

    - name: 🎯 Optimize build artifacts
      run: |
        # Ensure proper file permissions
        find dist -type f -name "*.js" -exec chmod 644 {} \;
        find dist -type f -name "*.css" -exec chmod 644 {} \;
        find dist -type f -name "*.html" -exec chmod 644 {} \;
        
        # Add cache headers via meta tags for better performance
        if [ -f dist/index.html ]; then
          echo "Build artifacts optimized successfully"
        fi

    - name: ✅ Check deployment readiness
      id: deployment-check
      run: |
        if [ -d "dist" ] && [ "$(ls -A dist)" ]; then
          echo "enabled=true" >> $GITHUB_OUTPUT
          echo "✅ Deployment artifacts ready"
          
          # Verify CNAME file for custom domain
          if [ -f "dist/CNAME" ]; then
            domain=$(cat dist/CNAME)
            echo "🌐 Custom domain configured: $domain"
            echo "domain=$domain" >> $GITHUB_OUTPUT
          else
            echo "⚠️ CNAME file missing - custom domain may not work"
          fi
          
          # Check essential files
          [ -f "dist/index.html" ] && echo "✅ index.html present" || echo "❌ index.html missing"
          [ -f "dist/robots.txt" ] && echo "✅ robots.txt present" || echo "⚠️ robots.txt missing"
          
        else
          echo "enabled=false" >> $GITHUB_OUTPUT
          echo "❌ No deployment artifacts found"
          exit 1
        fi

    - name: 🔧 Setup Pages
      if: steps.deployment-check.outputs.enabled == 'true'
      uses: actions/configure-pages@v5

    - name: 📤 Upload Pages artifact
      if: steps.deployment-check.outputs.enabled == 'true'
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./dist
        retention-days: 1

  deploy:
    name: 🌐 Deploy to Pages
    if: needs.build.outputs.deployment-enabled == 'true'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: 🚀 Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: 🎉 Deployment summary
      run: |
        echo "## 🎉 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
        echo "🌐 **Site URL:** ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
        if [ -n "${{ needs.build.outputs.domain || '' }}" ]; then
          echo "🔗 **Custom Domain:** https://${{ needs.build.outputs.domain || 'badori.io' }}" >> $GITHUB_STEP_SUMMARY
        fi
        echo "⏰ **Deployed at:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "📝 **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Deployment Details" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Custom domain configured" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ SEO files included (robots.txt, CNAME)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Production build optimized" >> $GITHUB_STEP_SUMMARY